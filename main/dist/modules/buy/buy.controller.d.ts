import { Response } from 'express';
import { ListBuyByUserDto, AddNormalBuyDto, AddWelcomePackBuyDto, AddPrePurchaseSetBuyDto, CommitPrePurchaseSetBuyDto, AddFamesBuyDto, AddSafeZoneTeleportBuyDto, AddHotPointTeleportBuyDto, AddMapTeleportBuyDto, AddUserLocationTeleportBuyDto, AddSquadMemberTeleportBuyDto, AddRandomPrizeBuyDto, AddMessagesBuyDto, AddMultiBuyDto, AddDollarAddBuyDto } from '../../dto/buy';
import { SessionUser } from '../../dto/session-user';
import { Page } from "../../dto/page";
import { ItemService } from "../item/item.service";
import { BuyService } from "./buy.service";
import { QueueService } from "../queue/queue.service";
import { UserDollarChangeService } from "../user-dollar-change/user-dollar-change.service";
import { UserDollarService } from "../user/user-dollar.service";
import { LevelService } from "../level/level.service";
import { UserService } from "../user/user.service";
import { ServerConfigService } from "../server-config/server-config.service";
import { UserLocationsService } from "../user/user-locations.service";
import { UserLoginService } from "../user/user-login.service";
import { SquadService } from "../squad/squad.service";
import { SquadUserService } from "../squad/squad-user.service";
export declare class BuyController {
    private readonly buyService;
    private readonly queueService;
    private readonly itemService;
    private readonly userService;
    private readonly userLocationsService;
    private readonly userDollarService;
    private readonly userDollarChangeService;
    private readonly userLoginService;
    private readonly levelService;
    private readonly serverConfigService;
    private readonly squadService;
    private readonly squadUserService;
    constructor(buyService: BuyService, queueService: QueueService, itemService: ItemService, userService: UserService, userLocationsService: UserLocationsService, userDollarService: UserDollarService, userDollarChangeService: UserDollarChangeService, userLoginService: UserLoginService, levelService: LevelService, serverConfigService: ServerConfigService, squadService: SquadService, squadUserService: SquadUserService);
    checkIsBuying(): Promise<boolean>;
    checkUserOnlineValid(steamId: any): Promise<boolean>;
    checkUserOnlineToday(steamId: any): Promise<boolean>;
    checkHaveBoughtThisMonth(userId: any): Promise<any>;
    checkBuyLimitValid(itemId: any, itemConfigs: any, buyList: any, userLevel: any, sales: any, willBuyNumber: any): Promise<{
        valid: boolean;
        reason: string;
    } | {
        valid: boolean;
        reason?: undefined;
    }>;
    listByUser(userInfo: SessionUser, page: Page, query: ListBuyByUserDto, res: Response): Promise<Response<any, Record<string, any>>>;
    getHotZoneTeleportBuyTimesByUser(userInfo: SessionUser, res: Response): Promise<Response<any, Record<string, any>>>;
    listRandomPrizeStatusByUser(userInfo: SessionUser, res: Response): Promise<Response<any, Record<string, any>>>;
    listLoginSetEverydayStatusByUser(userInfo: SessionUser, res: Response): Promise<Response<any, Record<string, any>>>;
    listDidiVehicleIds(userInfo: SessionUser, res: Response): Promise<Response<any, Record<string, any>>>;
    addNormal(req: any, userInfo: SessionUser, body: AddNormalBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addMulti(req: any, userInfo: SessionUser, body: AddMultiBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addWelcomePack(req: any, userInfo: SessionUser, body: AddWelcomePackBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addPrePurchaseSet(req: any, userInfo: SessionUser, body: AddPrePurchaseSetBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    commitPrePurchaseSet(req: any, userInfo: SessionUser, body: CommitPrePurchaseSetBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    commitPrePurchaseSetV2(req: any, userInfo: SessionUser, body: CommitPrePurchaseSetBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addFames(req: any, userInfo: SessionUser, body: AddFamesBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addGameMessages(req: any, userInfo: SessionUser, body: AddMessagesBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addSafeZoneTeleport(req: any, userInfo: SessionUser, body: AddSafeZoneTeleportBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addHotPointTeleport(req: any, userInfo: SessionUser, body: AddHotPointTeleportBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addMapTeleport(req: any, userInfo: SessionUser, body: AddMapTeleportBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addUserLocationTeleport(req: any, userInfo: SessionUser, body: AddUserLocationTeleportBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addSquadMemberTeleport(req: any, userInfo: SessionUser, body: AddSquadMemberTeleportBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addRandomPrize(req: any, userInfo: SessionUser, body: AddRandomPrizeBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addRandomPrizeV2(req: any, userInfo: SessionUser, body: AddRandomPrizeBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addRandomPrize10V2(req: any, userInfo: SessionUser, body: AddRandomPrizeBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
    addDollarAdd(req: any, userInfo: SessionUser, body: AddDollarAddBuyDto, res: Response): Promise<Response<any, Record<string, any>>>;
}
